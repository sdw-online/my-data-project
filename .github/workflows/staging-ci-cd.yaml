name: Staging CI/CD Pipeline for Events

on:
  push:
    branches:
      - staging
      
permissions:
  contents: write 

  
jobs:
  build_staging_environment:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir pandas pytest
          python -m pip list

  run_staging_tests:
    needs: build_staging_environment
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code again for the test job
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Set up Python environment again
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # 3. Install dependencies again
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --no-cache-dir pandas pytest

      # 4. Set PYTHONPATH to include the src directory
      - name: Set PYTHONPATH
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/src

      # 5. Print Python Path
      - name: Print Python Path
        run: |
          which python
          python --version
          pip --version

      # 6. Run end-to-end and performance tests
      - name: Run end-to-end and performance tests
        run: |
          python -m pytest tests/test_events_staging.py


  create_pr_to_staging:
    needs: run_staging_tests
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code before creating a pull request
      - name: Checkout repo to create PR
        uses: actions/checkout@v2
  
      # 2. Create a Pull Request to the staging branch if tests pass
      - name: Create pull request to Staging
        uses: peter-evans/create-pull-request@v3
        with:
          branch: main
          commit-message: "Automatically deploy changes from Staging to PROD"
          title: "Deploy changes from staging to PROD"
          body: "This PR automatically deploys all changes from staging to production."

      # 3. Auto-merge the PR if itâ€™s created
      - name: Auto-merge PR
        uses: actions/github-script@v6
        if: success()
        with:
          script: |
            const pr = context.payload.pull_request;
            if (pr) {
              github.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
            }